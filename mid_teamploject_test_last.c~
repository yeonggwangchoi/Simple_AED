#include <mega128.h>
#include <delay.h>
#include <alcd.h>
#include <stdio.h>

unsigned char sec_cnt=0, t_sec=0, t_min=0; //타이머 셋팅을 위한 변
int cpr_count=0; //심폐소생술 횟수
unsigned char a, b; //FND FONT Index를 위한 변수
int e_s=0; //전기 충격 횟수
int volt; //volt 값
char text[16]; //lcd 문자열
int i=0; //volt 조절 무한 루프를 탈출 하기 위한 변수
unsigned char j; //경고음을 위한 for loop 변수
unsigned char FONT[]={0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xd8, 0x80, 0x98};  //FND표시를 위한 FONT

#define FIRST_ADC_INPUT 0
#define LAST_ADC_INPUT 0
unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
// Voltage Reference: AREF pin
#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))

// ADC interrupt service routine
// with auto input scanning
interrupt [ADC_INT] void adc_isr(void)
{
static unsigned char input_index=0;
// Read the AD conversion result
adc_data[input_index]=ADCW;
// Select next ADC input
if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
   input_index=0;
ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
// Delay needed for the stabilization of the ADC input voltage
delay_us(10);
// Start the AD conversion
ADCSRA|=(1<<ADSC);
}

// External Interrupt 1 service routine
interrupt [EXT_INT1] void ext_int1_isr(void)
{
    i=1; //인터럽트를 통해 변수를 바꿔 무한 루프를 탈출
}

// External Interrupt 2 service routine
interrupt [EXT_INT2] void ext_int2_isr(void)
{
// Place your code here
    
    //FND 표시
    b++;
    if(b>9){
        b=0;
        a++;
    }
    if(a>2){
        a=0;
    }
    cpr_count++;
    PORTB = FONT[b];
    PORTA = FONT[a];
    //
    
    //cpr횟수가 30번 지나면 충전이 완료
    if(cpr_count%30==0)
    {
        if(EIFR==0x08){ //전기 충격전 의식이 돌아올 경우를 대비
            lcd_clear();
            sprintf(text,"Time %i %i",t_min,t_sec);
            lcd_puts(text);
            lcd_gotoxy(0,1);
            sprintf(text,"CPR %i, ES %i ",cpr_count,e_s);
            lcd_puts(text);
            delay_ms(10000);
            while(1){
                _lcd_write_data(0x08);
            }
        }
        PORTD.5=0x00;
        PORTD.6=0x01;
        lcd_clear();
        lcd_putsf("Please fall off.");     //떨어지세요
        delay_ms(3000);
        lcd_clear();  
        lcd_putsf("Can get hurt.");  //다칠 수 있다 
        for(j=0; j<3; j++){
            OCR3AH=11594>>8;
            OCR3AL=11595&0x00FF;
            delay_ms(500);
            
            OCR3AH=13114>>8;
            OCR3AL=13114&0x00FF;
            delay_ms(500);
        }
        OCR3AH=0x00;
        OCR3AL=0x00;
        delay_ms(2000);
        lcd_clear();
        lcd_putsf("In"); 
        lcd_gotoxy(0,1);
        lcd_putsf("electric shock.");  // 전기충격중
        PORTD.7=0x01;
        delay_ms(2000);
        PORTD.7=0x00;
        delay_ms(100);
        lcd_clear();
        e_s++;
        PORTD.6=0x00;
        PORTD.5=0x01;
    }
    //
}

// External Interrupt 3 service routine
interrupt [EXT_INT3] void ext_int3_isr(void)
{
// Place your code here
    //사용사 선택으로 정지 할때
    lcd_clear();
    sprintf(text,"Time %i %i",t_min,t_sec);
    lcd_puts(text);
    lcd_gotoxy(0,1);
    sprintf(text,"CPR %i, ES %i ",cpr_count,e_s);
    lcd_puts(text);
    delay_ms(10000);
    while(1){
        _lcd_write_data(0x08);
    }
    //
}

// Timer 0 overflow interrupt service routine
interrupt [TIM0_OVF] void timer0_ovf_isr(void)//타이머 셋팅
{
// Place your code here
    sec_cnt++;
    if(sec_cnt==125){
        sec_cnt=0;
        t_sec++;
    }
    if(t_sec==60){
        t_min++;
        t_sec=0;
    }
    if(t_min==3){   //3분을 골든 타임으로 두고 3분이 지나면 골든 타임이 지났다는 문구와 함께 종료
        lcd_clear();
        lcd_putsf("Golden Time");
        lcd_gotoxy(0,1);
        lcd_putsf("has passed");
        delay_ms(5000);
        while(1){
            _lcd_write_data(0x08);
        }
    }
    TCNT0=0x83;
}


//프로그램 첫 시작에만 동작하는 함수
void first_system_on(void){
    lcd_gotoxy(0,0);
    lcd_putsf("System Power on");    //전원 on
    delay_ms(2000);
    
    lcd_clear();
    lcd_putsf("booting"); //부팅중
    delay_ms(1000);
    lcd_clear();
    lcd_putsf("adjust"); //충전 볼트를 조절하세요
    lcd_gotoxy(0,1);
    lcd_putsf("the charging volt");  
    delay_ms(2000);
     while(i!=1)//volt 조절을 위해 무한 루프를 돌게 한 후 인터럽트를 사용해 탈출
    {   
        volt = adc_data[0];
        volt = volt * 2;
        sprintf(text,"Volt = %i[V]",volt);
        lcd_clear();
        lcd_puts(text);
        delay_ms(300);
    }
    lcd_clear();
    lcd_putsf("In case of"); //긴급 상황인 경우
    lcd_gotoxy(0,1);
    lcd_putsf("emergency");    
    delay_ms(2000);
    lcd_clear();
    lcd_putsf("please proceed"); //cpr을 진행해주세요
    lcd_gotoxy(0,1);
    lcd_putsf("with cpr");   
    delay_ms(2000);              
}


//CPR을 하라는 안내 함수
void cpr(void){ 
    lcd_clear();          
    lcd_putsf("Run cpr until"); //다음 지시까지 cpr을 실시하세요.
    lcd_gotoxy(0,1);
    lcd_putsf("next instruction");
    delay_ms(1000);
    lcd_clear();
    lcd_putsf("Charge for"); //전기충격을 위해를 충전합니다.
    lcd_gotoxy(0,1);
    lcd_putsf("electric shock"); 
    delay_ms(2000);
    lcd_clear();
    lcd_putsf("Please cpr until"); //충전이 완료되기 전까지 cpr을 해주세요
    lcd_gotoxy(0,1);
    lcd_putsf("charging is complete");  
    delay_ms(1000);
}

void main(void)
{
// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port B initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (1<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (1<<PORTD0);

// Port E initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In 
DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (1<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T 
PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);

// Port F initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);

// Port G initialization
// Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
// State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 15.625 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
// Timer Period: 16.384 ms
ASSR=0<<AS0;
TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (1<<CS01) | (1<<CS00);
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 3 initialization
// Clock source: System Clock
// Clock value: 16000.000 kHz
// Mode: CTC top=OCR3A
// OC3A output: Toggle on compare match
// OC3B output: Disconnected
// OC3C output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer Period: 0.0625 us
// Output Pulse(s):
// OC3A Period: 0.125 us Width: 0.0625 us
// Timer3 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR3A=(0<<COM3A1) | (1<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (1<<WGM32) | (0<<CS32) | (0<<CS31) | (1<<CS30);
TCNT3H=0x00;
TCNT3L=0x00;
ICR3H=0x00;
ICR3L=0x00;
OCR3AH=0x00;
OCR3AL=0x00;
OCR3BH=0x00;
OCR3BL=0x00;
OCR3CH=0x00;
OCR3CL=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);

// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Falling Edge
// INT1: On
// INT1 Mode: Falling Edge
// INT2: On
// INT2 Mode: Falling Edge
// INT3: On
// INT3 Mode: Falling Edge
// INT4: Off
// INT5: Off
// INT6: Off
// INT7: Off
EICRA=(1<<ISC31) | (0<<ISC30) | (1<<ISC21) | (0<<ISC20) | (1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (1<<INT3) | (1<<INT2) | (1<<INT1) | (1<<INT0);
EIFR=(0<<INTF7) | (0<<INTF6) | (0<<INTF5) | (0<<INTF4) | (1<<INTF3) | (1<<INTF2) | (1<<INTF1) | (0<<INTF0);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);

// ADC initialization
// ADC Clock frequency: 1000.000 kHz
// ADC Voltage Reference: AREF pin
ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
ADCSRA=(1<<ADEN) | (1<<ADSC) | (0<<ADFR) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
SFIOR=(0<<ACME);

// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS: PORTC Bit 0
// RD: PORTC Bit 1
// EN: PORTC Bit 2
// D4: PORTC Bit 4
// D5: PORTC Bit 5
// D6: PORTC Bit 6
// D7: PORTC Bit 7
// Characters/line: 16
lcd_init(16);

// Globally enable interrupts
#asm("sei")
first_system_on();

while (1)
    {
        cpr(); 
    }
}
